geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point() +
facet_wrap(facets = ~ Year)
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
library("gganimate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State,frame=Year)) +
geom_point()
detach("package:ggtern", unload=TRUE)
library(tidyr)
library(ggplot2)
library(dplyr)
library(patchwork)
library(gganimate)
df = read.csv("Desktop/GIT_REPOSITORIES/Data_Course/data/landdata-states.csv")
head(df)
glimpse(df)
sub1 = subset(df, State %in% c("HI","UT"))
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point() +
facet_wrap(facets = ~ Year)
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State,frame=Year)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point() +
facet_wrap(facets = ~ Year)
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point() +
facet_wrap(facets = ~ Year)
detach("package:gganimate", unload=TRUE)
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point() +
facet_wrap(facets = ~ Year)
library(tidyr)
library(ggplot2)
library(dplyr)
library(patchwork)
# library(gganimate)
df = read.csv("Desktop/GIT_REPOSITORIES/Data_Course/data/landdata-states.csv")
head(df)
glimpse(df)
sub1 = subset(df, State %in% c("HI","UT"))
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point() +
facet_wrap(facets = ~ Year)
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State,frame=Year)) +
geom_point()
install.packages("ggplot2")
library(tidyr)
library(ggplot2)
library(dplyr)
library(patchwork)
df = read.csv("Desktop/GIT_REPOSITORIES/Data_Course/data/landdata-states.csv")
head(df)
glimpse(df)
sub1 = subset(df, State %in% c("HI","UT"))
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point()
install.packages("ggplot2")
library(ggplot2)
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point()
library(tidyr)
library(ggplot2)
library(dplyr)
library(patchwork)
library(gganimate)
df = read.csv("Desktop/GIT_REPOSITORIES/Data_Course/data/landdata-states.csv")
head(df)
glimpse(df)
sub1 = subset(df, State %in% c("HI","UT","AL","NY"))
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point()
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point(alpha=.2)
ggplot(sub1, aes(x=Home.Value,y=Structure.Cost,col=State)) +
geom_point(alpha=.2) +
facet_wrap(facets = ~ Year)
p = ggplot(sub1, aes(x=Home.Value,y=Structure.Cost)) +
geom_point(alpha=.25) +
geom_point(aes(col=sub1$State,frame=sub1$Year))
gganimate(p, interval=0.2)
violin = ggplot(df, aes(x=factor(Qrtr),y = Land.Value,fill = factor(Qrtr))) +
geom_boxplot(aes(frame=factor(df$Year)))
gganimate(violin, interval = 0.2)
# A ggplot is made up of two main components – a ggplot() object and at least one geom layer.
ggplot() + geom_.....
# The ggplot() object acts as a storage facility for the data.
# It is here where we define the data frame that houses the x and y coordinate values
# themselves and instructions on how to split the data.
# Aesthetics
#
# The aes() aesthetic mapping function lives inside a ggplot object and is where we specify
# the set of plot attributes that remain constant throughout the subsequent layers
# (unless overwritten – more on this later).
# We can consider the relationship between the aes() and geoms components as follows:
# The aes() function is the “how” – how data is stored, how data is split
# geoms are the “what”—what the data looks like. These are geometrical objects stored in subsequent layers.
p2 = ggplot(df, aes(x=Year,y=Land.Value))
p2 + geom_point()
p2 + geom_point(col="SteelBlue")
p2 + geom_point(aes(col=factor(Qrtr)))
p2 + geom_point(aes(size=Home.Value))
p2 + geom_point(aes(size=Home.Value,col=factor(Qrtr)))
# Layers
#
# We use the + operator to construct new layers. By appending layers we can connect the “how” (aesthetics)
# to the “what” (geometric objects). Adding geometric, scale, facet and statistic layers to a ggplot()
# object is how to control virtually every visual aspect of the plot from the data contained in the object.
# Adding a geometric object layer
#
# A geometric object is used to define the style of the plot. Common geometric objects include:
#
# geom_point() which is used to draw a dot plot
# geom_line() used to draw a line plot
# geom_bar() used to draw a bar chart.
#
#
# A single plot can have numerous geom layers, and it is also possible to overlay results
# from multiple data frames in one plot. Overwriting the aesthetic mapping that was
# defined in the ggplot() object can be done inside a geom object function (more on this later!).
#
ggplot(data = df, mapping = aes(x = Home.Value, y = Structure.Cost))
ggplot(data = df, mapping = aes(x = Home.Value, y = Structure.Cost)) +
geom_line() +
geom_point() +
geom_area() +
geom_boxplot(aes(col=factor(Year), group = factor(Year))) +
geom_violin(fill="green")
ggplot(df, aes(x=factor(Qrtr),y = Land.Value,fill = factor(Qrtr))) +
geom_violin()
# Notice how we can keep piling on geom layers as long as they are compatible with our aesthetics
plot = ggplot(data = df, mapping = aes(x = Home.Value, y = Structure.Cost))
plot + geom_point()
# We can define different aesthetics within each geom we call (overwrites automatically if you define aesthetics that
# were defined globally in the ggplot() function)
plot + geom_point(aes(col=region))
plot + geom_point(aes(col=region, shape = factor(Qrtr)))
akmoky = subset(df, State %in% c("AK","MO","KY"))
ggplot(akmoky) +
geom_point(aes(x=Year, y=Land.Value, col = State)) +
geom_smooth(aes(x=Year, y=Land.Value, col = State))
ggplot(akmoky) +
geom_point(aes(x=Year, y=Land.Value, col = State)) +
geom_boxplot(aes(x=Year, y=Land.Value, fill = State),alpha=.1)
plot2 = ggplot(akmoky) +
geom_point(aes(x=Year, y=Land.Value, col = State)) +
geom_boxplot(aes(x=Year, y=Land.Value, fill = State),alpha=.1)
plot2 +
labs(y = "Land Value, okay, like new Y-axis label or something",
title = "Definitely the main plot title",
subtitle = "This is, like, the subtitle. It's basically smaller text, okay?") +
scale_fill_discrete(label = c("The cold place","The place with horse\nraces","The boring place")) +
scale_color_discrete(name = "The new legend name")
xlim()
ylim()
coord_cartesian()
labs(x="...",y="...",title="...",subtitle="...",caption="...")
library(ggthemes)
plot2 + theme_fivethirtyeight()
plot2 + theme_few()
plot2 + theme_wsj()
plot(x=df$State,y=df$Home.Value)
plot(x=reorder(x = df$State, X = df$Home.Value),y=df$Home.Value)
library(gapminder)
plot(gapminder)
?geom_histogram
library(purrr)
?map
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
list(c(3:30),c(1:10),c(5:55)) %>%
map(1)
levels(model_mush2$Species)
levels(model_mush2$Species)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom)
library(fitdistrplus)
library(MASS)
library(lme4)
library(modelr)
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/data/")
mush = read.csv("mushroom_growth.csv")
str(mush)
glimpse(mush)
plot(mush)
for(i in names(mush)){
plot(mush[,"GrowthRate"] ~ mush[,i], xlab = i, ylab = "GrowthRate", main = i)}
#humidity,nitrogen,light,species
plot(density(mush$GrowthRate))
hist(mush$GrowthRate)
plot(fitdist(mush$GrowthRate, "norm"))
plot(fitdist(mush$GrowthRate, "gamma")) #has the best data fit
plot(fitdist(mush$GrowthRate, "logis"))
GRaov = aov(GrowthRate ~ (Humidity+Nitrogen+Light)*Species, data = mush)
GRaov2 = aov(GrowthRate ~ (Humidity*Nitrogen*Light)*Species, data = mush)
summary(GRaov) #shows sig dif for humidity, light, species, humidity:species, light:species
summary(GRaov2) #shows sig dif for humidity, light, species,humidity:light, humidity:species, light:species, humidity:light:species
TukeyHSD(GRaov)
TukeyHSD(GRaov2)
#Tukey tests ignored all non-factors and only compares humidity, species, and humidity:species
anova(GRaov,GRaov2) #tells me that model GRaov2 is sig dif from model GRaov
##Plots using GRaov##
plot1 = ggplot(GRaov, mapping = aes(x=Light, y=GrowthRate, col = Species))
plot1 + geom_point() + geom_smooth()
plot2 = ggplot(mush, mapping = aes(x=Humidity, y=GrowthRate, col = Species))
plot2 + geom_point() + geom_smooth()
##Plots using GRaov2##
plot3 = ggplot(GRaov2, mapping = aes(x=Light, y=GrowthRate, col = Species))
plot3 + geom_point() + geom_smooth()
plot4 = ggplot(GRaov2, mapping = aes(x=Light, y=GrowthRate, col = Species))
###predictive models###
model_mush = mush %>% add_predictions(model = GRaov)
mod_aov = aov(GrowthRate ~ (Humidity+Nitrogen+Light+Species)*pred, data = model_mush)
model_mush2 = mush %>% add_predictions(model = GRaov2)
mod_aov2 = aov(GrowthRate ~ (Humidity*Nitrogen*Light*Species)*pred, data = model_mush2)
summary(mod_aov) #shows sig dif for humidity, light, species, prediction, humidity:pred, species:pred,
summary(mod_aov2) #shows sig dif for humidity, light, species, pred, light:pred, humidity:nitrogen:species
TukeyHSD(mod_aov)
anova(mod_aov,mod_aov2) #tells me that pred model mod_aov2 is sig dif from pred model mod_aov
for(h in names(model_mush)){
plot(model_mush[,"GrowthRate"] ~ model_mush[,h], xlab = h, ylab = "GrowthRate", main = h)}
ggplot(data = model_mush) +
geom_point(aes(x=Nitrogen, y=GrowthRate, col = Species)) +
geom_point(aes(x=pred, y=GrowthRate, col=Species)) +
geom_smooth(aes(x=Nitrogen, y=GrowthRate),col = "Black")
ggplot(data = model_mush2) +
geom_point(aes(x=Nitrogen, y=GrowthRate, col = Species)) +
geom_point(aes(x=pred, y=GrowthRate),col="purple") +
geom_smooth(aes(x=Nitrogen, y=GrowthRate),col = "Black") +
geom_smooth(aes(x=pred, y=GrowthRate),col="purple") +
labs(subtitle = "Purple indicates predicted values")
ggplot(data = model_mush2) +
geom_point(aes(x=Nitrogen, y=GrowthRate, col = factor(Temperature), shape = Species)) +
geom_smooth(aes(x=Nitrogen, y=GrowthRate, col = Species))
levels(model_mush2$Species)
cornucopiae = model_mush2 %>% filter(Species == "P.cornucopiae")
ostreotus = model_mush2 %>% filter(Species == "P.ostreotus")
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus")
p2 = ggplot(cornucopiae, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. cornucopiae")
gridExtra::grid.arrange(p1,p2)
library(patchwork)
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("lazyeval")
library(patchwork)
install.packages("patchwork")
devtools::install_github("thomasp85/patchwork")
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus")
library(ggplot2)
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus")
p2 = ggplot(cornucopiae, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. cornucopiae")
p1 + p2
??patchwork
plot_layout(p1 + p2)
p1 + p2
library(patchwork)
p1 + p2
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus") +
scale_y_continuous(limits = c(0,700))
p1
p2 = ggplot(cornucopiae, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. cornucopiae") +
scale_y_continuous(limits = c(0,700))
p2
library(patchwork)
p1 + p2
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus") +
scale_y_continuous(limits = c(0,700)) +
theme(legend.position = NA)
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus") +
scale_y_continuous(limits = c(0,700)) +
theme(legend.position = NULL)
p1
p1 = ggplot(ostreotus, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. ostreotus") +
scale_y_continuous(limits = c(0,700)) +
theme(legend.position = "none")
p1
p2 = ggplot(cornucopiae, aes(x=Nitrogen, y=GrowthRate, col = Humidity)) +
geom_point() +
stat_smooth() + ggtitle("P. cornucopiae") +
scale_y_continuous(limits = c(0,700))
p2
library(patchwork)
p1 + p2
mush = read.csv(file = "~/Desktop/GIT_REPOSITORIES/Data_Course/data/mushroom_growth.csv")
library(tidyr)
library(ggplot2)
library(dplyr)
library(devtools)
library(fitdistrplus)
sample_n(mush, 10)
levels(mush$GrowthRate)
fitdist(mush$GrowthRate, "norm")
plot(fitdist(mush$GrowthRate, "gamma"))
mush.mod = glm(GrowthRate ~ Light + Nitrogen + Humidity + Temperature , data = mush)
summary(mush.mod)
tidy(mush.mod)
library(tidyr)
boxplot(mush$GrowthRate~mush$Light)
boxplot(mush$GrowthRate~mush$Nitrogen)
boxplot(mush$GrowthRate~mush$Humidity)
boxplot(mush$GrowthRate~mush$Temperature)
boxplot(mush$GrowthRate~mush$Nitrogen + mush$Temperature)
ANOVA1 = aov(GrowthRate~Nitrogen, data = mush)
summary(ANOVA1)
ANOVA2 = aov(GrowthRate~Light:Species, data = mush)
summary(ANOVA2)
ANOVA3 = aov(GrowthRate~Humidity, data = mush)
summary(ANOVA3)
### relationship between growth rate and Light shows the lowest P-value
ggplot(mush, mapping = aes(x=Humidity, y=GrowthRate, fill = Species)) +
geom_boxplot()
TukeyHSD(ANOVA2)
### error, need to change Light from numeric to factor
mush$Light <- as.factor(mush$Light)
TukeyHSD(ANOVA2)
ggplot(mush, aes(x=GrowthRate, y=Light)) + geom_point()
aov(GrowthRate ~ Light*Nitrogen*Humidity*Temperature*Species, data = mush) %>% summary()
aov(GrowthRate ~ Light*Humidity*Temperature*Species, data = mush) %>% summary()
mush.mod1 = aov(GrowthRate ~ Light*Humidity*Temperature*Species, data = mush) %>% summary()
sub1 = subset(mush, Light %in% c("10", "20"))
ggplot(sub1, aes(x=Light, y=Temperature, col=Species)) + geom_point()
ggplot(mush, aes(x=Nitrogen,y=GrowthRate)) + geom_point()
ggplot(mush, aes(x=Nitrogen,y=GrowthRate,color=Species)) + geom_point()
ggplot(mush, aes(x=Nitrogen,y=GrowthRate,color=Species)) +
geom_point() +
stat_smooth()
model1 = glm(GrowthRate ~ Nitrogen*Species, data = mush)
summary(model1)
View(mush)
model1 = aov(GrowthRate ~ Nitrogen*Species, data = mush)
summary(model1) # Hm....nope. That interaction term is not significant!
subset(mush, Species = "P.ostreatus")
subset(mush, Species = "P.ostreotus")
View(mush)
subset(mush, Species = P.ostreotus)
subset(mush, Species = "P.ostreotus")
subset(mush, Species = levels(mush$Species)[1])
P.o = subset(mush, Species = levels(mush$Species)[1])
View(ostreotus)
?subset
P.o = subset(mush, Species == levels(mush$Species)[1])
P.o = subset(mush, Species == "P.ostreotus")
P.c = subset(mush, Species == "P.cornucopiae")
View(P.c)
aov(GrowthRate ~ Nitrogen*Humidity, data = P.o)
model2 = aov(GrowthRate ~ Nitrogen*Humidity, data = P.o)
model2 = aov(GrowthRate ~ Nitrogen*Humidity, data = P.o)
model3 = aov(GrowthRate ~ Nitrogen*Humidity, data = P.c)
anova(model1,model2)
anova(model2,model3)
summary(anova(model2,model3))
anova(model2,model3)
model2.Po = aov(GrowthRate ~ Nitrogen*Humidity, data = P.o)
model2.Pc = aov(GrowthRate ~ Nitrogen*Humidity, data = P.c)
model3.Po = aov(GrowthRate ~ Nitrogen*Humidity*Temperature, data = P.o)
model3.Pc = aov(GrowthRate ~ Nitrogen*Humidity*Temperature, data = P.c)
anova(model2.Po, model3.Po)
anova(model2.Pc, model3.Pc)
ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth()
ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth()
ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
facet_grid(~Temperature)
ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
facet_grid(~Temperature)
summary(model3.Pc)
TukeyHSD(model3.Pc)
TukeyHSD(model3.Pc)
model4.Pc = model3.Pc = aov(GrowthRate ~ Nitrogen*Humidity*factor(Temperature), data = P.c)
TukeyHSD(model4.Pc)
TukeyHSD(model4.Pc)$`Humidity:factor(Temperature)`
TukeyHSD(model4.Pc)
plotP.c = ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
facet_grid(~Temperature)
plotP.o = ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
facet_grid(~Temperature)
library(gridExtra)
grid.arrange(plotP.c,plotP.o)
plotP.c = ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
scale_y_continuous(limits = c(0,700)) + # this will force both graphs to have same y-axis scale
facet_grid(~Temperature)
plotP.o = ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
scale_y_continuous(limits = c(0,700)) + # this will force both graphs to have same y-axis scale
facet_grid(~Temperature)
grid.arrange(plotP.c,plotP.o)
plotP.c = ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
scale_y_continuous(limits = c(0,700)) + # this will force both graphs to have same y-axis scale
facet_grid(~Temperature) +
ggtitle("P. cornucopiae")
plotP.o = ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
scale_y_continuous(limits = c(0,700)) + # this will force both graphs to have same y-axis scale
facet_grid(~Temperature) +
ggtitle("P. ostreotus")
library(gridExtra)
grid.arrange(plotP.c,plotP.o)
ggplot(mush, aes(x=Nitrogen,y=GrowthRate,color=Species)) +
geom_point() +
stat_smooth()
# different response to nitrogen additions in different species? at least a possibility
model1 = aov(GrowthRate ~ Nitrogen*Species, data = mush)
summary(model1) # Hm....nope. That interaction term is not significant!
# But if I was trying to find out what the best way to grow each species is....
# I could subset and look at each species separately, since they appear to have different growth rates across the board...
P.o = subset(mush, Species == "P.ostreotus")
P.c = subset(mush, Species == "P.cornucopiae")
# Try two different models on each subset of data (by species)
model2.Po = aov(GrowthRate ~ Nitrogen*Humidity, data = P.o)
model2.Pc = aov(GrowthRate ~ Nitrogen*Humidity, data = P.c)
model3.Po = aov(GrowthRate ~ Nitrogen*Humidity*Temperature, data = P.o)
model3.Pc = aov(GrowthRate ~ Nitrogen*Humidity*Temperature, data = P.c)
anova(model2.Po, model3.Po)  # No difference between the models (Pvalue of 0.09749)
anova(model2.Pc, model3.Pc)  # yes difference between the models (Pvalue of 0.0002811)
# so.... for P. ostereotus, the two models are equally valid, for P. cornucopiae, there is a difference...not sure which is better.
# I'll deal with that later. For now I want to investigate a bit more
ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth()
# I see a peak productivity in there... Nitrogen of ~20 and high humidity
# let's try same plot with P. cornucopiae
ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth()
# Hey now...Looks like the humidity difference is a big deal for this species!
# check out the following plot that's separated by temperature as well
ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
facet_grid(~Temperature)
summary(model3.Pc) # BINGO! See the Humidity:Temperature interaction? Solidly in the realm of "significant"
# We see it visually. It makes sense. Tukey's Test will allow us to confirm which one has greater effect on response variable
TukeyHSD(model3.Pc)
# Except we get this shitty error:
# 2: In replications(paste("~", xx), data = mf) :
#   non-factors ignored: Temperature
# Tukey's test can only deal with categorical data since it's basically running a set of T-Tests on every combination we told it to model
# I'm gonna change Temperature to a factor since there are only two levels of it!
model4.Pc = model3.Pc = aov(GrowthRate ~ Nitrogen*Humidity*factor(Temperature), data = P.c)
TukeyHSD(model4.Pc)
plotP.c = ggplot(P.c, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
scale_y_continuous(limits = c(0,700)) + # this will force both graphs to have same y-axis scale
facet_grid(~Temperature) +
ggtitle("P. cornucopiae")
plotP.o = ggplot(P.o, aes(x=Nitrogen,y=GrowthRate,col=Humidity)) +
geom_point() +
stat_smooth() +
scale_y_continuous(limits = c(0,700)) + # this will force both graphs to have same y-axis scale
facet_grid(~Temperature) +
ggtitle("P. ostreotus")
library(gridExtra)
grid.arrange(plotP.c,plotP.o)
